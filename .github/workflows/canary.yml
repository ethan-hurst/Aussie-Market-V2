name: Canary - Staging Stripe/Webhooks

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *' # every 30 minutes

concurrency:
  group: canary-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  canary:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      actions: read
    env:
      PLAYWRIGHT_BASE_URL: ${{ secrets.STAGING_SITE_URL }}
      STAGING_SITE_URL: ${{ secrets.STAGING_SITE_URL }}
      CANARY_TOKEN: ${{ secrets.CANARY_TOKEN }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install deps
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Trigger Stripe test event (payment_intent.succeeded)
        id: stripe_event
        run: |
          npm i -g stripe
          # Create a test PaymentIntent to generate a succeeded event immediately
          # Associate metadata so our webhook maps it correctly (order_id may be synthetic for canary)
          EVENT_JSON=$(stripe trigger payment_intent.succeeded --log-level=info --api-key "$STRIPE_SECRET_KEY" --raw | tee /dev/stderr)
          echo "$EVENT_JSON" | jq -r '.id' | awk '{ print "STRIPE_TEST_EVENT_ID=" $1 }' >> $GITHUB_ENV

      - name: Run canary E2E
        run: |
          npx playwright test tests/e2e/canary.stripe-webhook.spec.ts --reporter=line --retries=1

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-canary-artifacts
          path: |
            playwright-report/**/*
            test-results/**/*
          retention-days: 7

      - name: Notify Slack on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REPO: ${{ github.repository }}
          STAGING_URL: ${{ secrets.STAGING_SITE_URL }}
        run: |
          if [ -z "${SLACK_WEBHOOK_URL}" ]; then
            echo "SLACK_WEBHOOK_URL not set; skipping Slack notification";
            exit 0;
          fi
          MSG="[$REPO] Canary failed on staging.\nStaging: ${STAGING_URL}\nRun: ${RUN_URL}"
          payload=$(jq -n --arg text "$MSG" '{text: $text}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"

      - name: Notify Microsoft Teams on failure
        if: failure()
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REPO: ${{ github.repository }}
          STAGING_URL: ${{ secrets.STAGING_SITE_URL }}
        run: |
          if [ -z "${TEAMS_WEBHOOK_URL}" ]; then
            echo "TEAMS_WEBHOOK_URL not set; skipping Teams notification";
            exit 0;
          fi
          MSG="[$REPO] Canary failed on staging.\nStaging: ${STAGING_URL}\nRun: ${RUN_URL}"
          payload=$(jq -n --arg text "$MSG" '{text: $text}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$TEAMS_WEBHOOK_URL"


